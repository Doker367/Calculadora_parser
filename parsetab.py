
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DIVIDIDO LOGARITMO MAS MENOS NUMERO PARENTESIS_DER PARENTESIS_IZQ POR POTENCIAexpresion : expresion MAS termino\n                 | expresion MENOS termino\n                 | expresion POTENCIA terminoexpresion : terminotermino : termino POR factor\n               | termino DIVIDIDO factortermino : factorfactor : NUMEROfactor : PARENTESIS_IZQ expresion PARENTESIS_DERfactor : LOGARITMO PARENTESIS_IZQ expresion PARENTESIS_DER'
    
_lr_action_items = {'NUMERO':([0,5,7,8,9,10,11,13,],[4,4,4,4,4,4,4,4,]),'PARENTESIS_IZQ':([0,5,6,7,8,9,10,11,13,],[5,5,13,5,5,5,5,5,5,]),'LOGARITMO':([0,5,7,8,9,10,11,13,],[6,6,6,6,6,6,6,6,]),'$end':([1,2,3,4,14,15,16,17,18,19,21,],[0,-4,-7,-8,-1,-2,-3,-5,-6,-9,-10,]),'MAS':([1,2,3,4,12,14,15,16,17,18,19,20,21,],[7,-4,-7,-8,7,-1,-2,-3,-5,-6,-9,7,-10,]),'MENOS':([1,2,3,4,12,14,15,16,17,18,19,20,21,],[8,-4,-7,-8,8,-1,-2,-3,-5,-6,-9,8,-10,]),'POTENCIA':([1,2,3,4,12,14,15,16,17,18,19,20,21,],[9,-4,-7,-8,9,-1,-2,-3,-5,-6,-9,9,-10,]),'PARENTESIS_DER':([2,3,4,12,14,15,16,17,18,19,20,21,],[-4,-7,-8,19,-1,-2,-3,-5,-6,-9,21,-10,]),'POR':([2,3,4,14,15,16,17,18,19,21,],[10,-7,-8,10,10,10,-5,-6,-9,-10,]),'DIVIDIDO':([2,3,4,14,15,16,17,18,19,21,],[11,-7,-8,11,11,11,-5,-6,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expresion':([0,5,13,],[1,12,20,]),'termino':([0,5,7,8,9,13,],[2,2,14,15,16,2,]),'factor':([0,5,7,8,9,10,11,13,],[3,3,3,3,3,17,18,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expresion","S'",1,None,None,None),
  ('expresion -> expresion MAS termino','expresion',3,'p_expresion_binaria','grammar_calculator.py',44),
  ('expresion -> expresion MENOS termino','expresion',3,'p_expresion_binaria','grammar_calculator.py',45),
  ('expresion -> expresion POTENCIA termino','expresion',3,'p_expresion_binaria','grammar_calculator.py',46),
  ('expresion -> termino','expresion',1,'p_expresion_termino','grammar_calculator.py',55),
  ('termino -> termino POR factor','termino',3,'p_termino_binario','grammar_calculator.py',59),
  ('termino -> termino DIVIDIDO factor','termino',3,'p_termino_binario','grammar_calculator.py',60),
  ('termino -> factor','termino',1,'p_termino_factor','grammar_calculator.py',67),
  ('factor -> NUMERO','factor',1,'p_factor_numero','grammar_calculator.py',71),
  ('factor -> PARENTESIS_IZQ expresion PARENTESIS_DER','factor',3,'p_factor_expresion','grammar_calculator.py',75),
  ('factor -> LOGARITMO PARENTESIS_IZQ expresion PARENTESIS_DER','factor',4,'p_factor_logaritmo','grammar_calculator.py',79),
]
